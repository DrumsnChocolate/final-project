2024/02/25 09:52:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 97521909
    GPU 0: NVIDIA A40
    CUDA_HOME: None
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.8.1
    MMEngine: 0.9.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 97521909
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/02/25 09:52:48 - mmengine - INFO - Config:
crop_size = (
    256,
    256,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        68.882,
        68.882,
        68.882,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ),
    std=[
        66.631,
        66.631,
        66.631,
    ],
    test_cfg=dict(size=(
        256,
        256,
    )),
    type='SegDataPreProcessor')
data_root = '/local/270071/data/cbis/cbis-linked'
dataset_type = 'CBISMonoDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=22000,
        max_keep_ckpts=2,
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=None,
    backbone=dict(
        act_cfg=dict(type='ReLU'),
        base_channels=64,
        conv_cfg=None,
        dec_dilations=(
            1,
            1,
            1,
            1,
        ),
        dec_num_convs=(
            2,
            2,
            2,
            2,
        ),
        downsamples=(
            True,
            True,
            True,
            True,
        ),
        enc_dilations=(
            1,
            1,
            1,
            1,
            1,
        ),
        enc_num_convs=(
            2,
            2,
            2,
            2,
            2,
        ),
        in_channels=3,
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        norm_eval=False,
        num_stages=5,
        strides=(
            1,
            1,
            1,
            1,
            1,
        ),
        type='UNet',
        upsample_cfg=dict(type='InterpConv'),
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            68.882,
            68.882,
            68.882,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        ),
        std=[
            66.631,
            66.631,
            66.631,
        ],
        test_cfg=dict(size=(
            256,
            256,
        )),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=64,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=64,
        in_index=4,
        loss_decode=[
            dict(loss_weight=0.4, naive_dice=True, type='DiceLoss'),
            dict(loss_weight=0.6, type='IoULoss'),
        ],
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=1,
        num_convs=1,
        type='FCNHead'),
    pretrained=None,
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.0001, type='Adam'),
    type='OptimWrapper')
optimizer = dict(lr=0.0001, type='Adam')
param_scheduler = [
    dict(monitor='mIoU', rule='greater', type='ReduceOnPlateauLR'),
]
record_gpu_snapshot = False
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/test', seg_map_path='annotations_binary/test'),
        data_root='/local/270071/data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='CLAHE'),
            dict(scale=(
                256,
                256,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mAcc',
        'mFscore',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='CLAHE'),
    dict(scale=(
        256,
        256,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=220000, type='IterBasedTrainLoop', val_interval=275)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        data_prefix=dict(
            img_path='images/train', seg_map_path='annotations_binary/train'),
        data_root='/local/270071/data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='CLAHE'),
            dict(scale=(
                256,
                256,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                auto_bound=True,
                degree=(
                    90,
                    90,
                ),
                prob=0.5,
                type='RandomRotate'),
            dict(
                auto_bound=True,
                degree=(
                    180,
                    180,
                ),
                prob=0.5,
                type='RandomRotate'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='CLAHE'),
    dict(scale=(
        256,
        256,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(auto_bound=True, degree=(
        90,
        90,
    ), prob=0.5, type='RandomRotate'),
    dict(auto_bound=True, degree=(
        180,
        180,
    ), prob=0.5, type='RandomRotate'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = None
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/val', seg_map_path='annotations_binary/val'),
        data_root='/local/270071/data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='CLAHE'),
            dict(scale=(
                256,
                256,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mAcc',
        'mFscore',
    ], type='IoUMetric')
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='CLAHE'),
    dict(scale=(
        256,
        256,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/unet-s5-d16_fcn-noaux_4xb4-220k_cbis-ddsm-mono-256x256'

2024/02/25 09:53:03 - mmengine - INFO - Total parameters: 28986625
2024/02/25 09:53:03 - mmengine - INFO - Trainable parameters: 28986625
2024/02/25 09:53:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/02/25 09:53:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/02/25 09:53:05 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.encoder.0.0.convs.0.conv.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.conv.weight - torch.Size([1024, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.1.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.upsample.interp_upsample.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.conv.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.upsample.interp_upsample.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.conv.weight - torch.Size([256, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.upsample.interp_upsample.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.conv.weight - torch.Size([512, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.upsample.interp_upsample.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([1, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/02/25 09:53:07 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/02/25 09:53:07 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/02/25 09:53:07 - mmengine - INFO - Checkpoints will be saved to /home/s1952889/final-project/implementation/mmsegmentation/work_dirs/unet-s5-d16_fcn-noaux_4xb4-220k_cbis-ddsm-mono-256x256/20240225_095239.
2024/02/25 09:55:44 - mmengine - INFO - Iter(train) [    50/220000]  lr: 1.0000e-04  eta: 7 days, 23:39:34  time: 2.8886  data_time: 2.7518  memory: 18834  loss: 0.9753  decode.loss_dice: 0.3862  decode.loss_iou: 0.5891  decode.acc_seg: 100.0000
2024/02/25 09:58:20 - mmengine - INFO - Iter(train) [   100/220000]  lr: 1.0000e-04  eta: 7 days, 23:09:46  time: 3.1399  data_time: 3.0024  memory: 4559  loss: 0.9546  decode.loss_dice: 0.3756  decode.loss_iou: 0.5790  decode.acc_seg: 100.0000
2024/02/25 10:01:00 - mmengine - INFO - Iter(train) [   150/220000]  lr: 1.0000e-04  eta: 8 days, 0:27:44  time: 3.8226  data_time: 3.6863  memory: 4559  loss: 0.9740  decode.loss_dice: 0.3855  decode.loss_iou: 0.5886  decode.acc_seg: 100.0000
2024/02/25 10:03:29 - mmengine - INFO - Iter(train) [   200/220000]  lr: 1.0000e-04  eta: 7 days, 21:53:02  time: 2.3598  data_time: 2.2257  memory: 4559  loss: 0.9611  decode.loss_dice: 0.3788  decode.loss_iou: 0.5823  decode.acc_seg: 100.0000
2024/02/25 10:06:08 - mmengine - INFO - Iter(train) [   250/220000]  lr: 1.0000e-04  eta: 7 days, 22:45:21  time: 3.5173  data_time: 3.3823  memory: 4559  loss: 0.9657  decode.loss_dice: 0.3811  decode.loss_iou: 0.5846  decode.acc_seg: 100.0000
2024/02/25 10:07:55 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:48  time: 0.5834  data_time: 0.5551  memory: 4559  
2024/02/25 10:08:16 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:32  time: 0.5063  data_time: 0.4722  memory: 1334  
2024/02/25 10:08:36 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:53  time: 0.3425  data_time: 0.3092  memory: 1052  
2024/02/25 10:09:00 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:24  time: 0.5555  data_time: 0.5223  memory: 1142  
2024/02/25 10:09:18 - mmengine - INFO - per class results:
2024/02/25 10:09:18 - mmengine - INFO - 
+-------+------+------+--------+-----------+--------+
| Class | IoU  | Acc  | Fscore | Precision | Recall |
+-------+------+------+--------+-----------+--------+
|  roi  | 3.16 | 98.2 |  5.47  |    3.17   |  98.2  |
+-------+------+------+--------+-----------+--------+
2024/02/25 10:09:18 - mmengine - INFO - Iter(val) [246/246]    aAcc: 98.2000  mIoU: 3.1600  mAcc: 98.2000  mFscore: 5.4700  mPrecision: 3.1700  mRecall: 98.2000  data_time: 0.4708  time: 0.5091
2024/02/25 10:09:18 - mmengine - INFO - Exp name: unet-s5-d16_fcn-noaux_4xb4-220k_cbis-ddsm-mono-256x256_20240225_095239
2024/02/25 10:10:14 - mmengine - INFO - Iter(train) [   300/220000]  lr: 1.0000e-04  eta: 7 days, 15:28:04  time: 2.7717  data_time: 2.6365  memory: 4560  loss: 0.9648  decode.loss_dice: 0.3805  decode.loss_iou: 0.5843  decode.acc_seg: 100.0000
2024/02/25 10:12:49 - mmengine - INFO - Iter(train) [   350/220000]  lr: 1.0000e-04  eta: 7 days, 16:14:11  time: 2.6138  data_time: 2.4792  memory: 4560  loss: 0.9665  decode.loss_dice: 0.3817  decode.loss_iou: 0.5848  decode.acc_seg: 100.0000
2024/02/25 10:15:21 - mmengine - INFO - Iter(train) [   400/220000]  lr: 1.0000e-04  eta: 7 days, 16:24:28  time: 3.2109  data_time: 3.0764  memory: 4560  loss: 0.9701  decode.loss_dice: 0.3834  decode.loss_iou: 0.5868  decode.acc_seg: 100.0000
2024/02/25 10:17:53 - mmengine - INFO - Iter(train) [   450/220000]  lr: 1.0000e-04  eta: 7 days, 16:27:22  time: 2.5812  data_time: 2.4470  memory: 4560  loss: 0.9496  decode.loss_dice: 0.3731  decode.loss_iou: 0.5766  decode.acc_seg: 100.0000
2024/02/25 10:20:25 - mmengine - INFO - Iter(train) [   500/220000]  lr: 1.0000e-04  eta: 7 days, 16:25:41  time: 3.9087  data_time: 3.7740  memory: 4560  loss: 0.9661  decode.loss_dice: 0.3811  decode.loss_iou: 0.5850  decode.acc_seg: 100.0000
2024/02/25 10:22:56 - mmengine - INFO - Iter(train) [   550/220000]  lr: 1.0000e-04  eta: 7 days, 16:23:17  time: 3.5247  data_time: 3.3901  memory: 4560  loss: 0.9627  decode.loss_dice: 0.3795  decode.loss_iou: 0.5833  decode.acc_seg: 100.0000
2024/02/25 10:23:31 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:17  time: 0.3981  data_time: 0.3705  memory: 1032  
2024/02/25 10:23:49 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:17  time: 0.4598  data_time: 0.4266  memory: 1203  
2024/02/25 10:24:10 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:47  time: 0.3344  data_time: 0.3011  memory: 974  
2024/02/25 10:24:32 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:22  time: 0.5564  data_time: 0.5231  memory: 1091  
2024/02/25 10:24:50 - mmengine - INFO - per class results:
2024/02/25 10:24:50 - mmengine - INFO - 
+-------+------+-------+--------+-----------+--------+
| Class | IoU  |  Acc  | Fscore | Precision | Recall |
+-------+------+-------+--------+-----------+--------+
|  roi  | 3.95 | 96.32 |  6.73  |    3.97   | 96.32  |
+-------+------+-------+--------+-----------+--------+
2024/02/25 10:24:50 - mmengine - INFO - Iter(val) [246/246]    aAcc: 96.3200  mIoU: 3.9500  mAcc: 96.3200  mFscore: 6.7300  mPrecision: 3.9700  mRecall: 96.3200  data_time: 0.4318  time: 0.4642
2024/02/25 10:27:04 - mmengine - INFO - Iter(train) [   600/220000]  lr: 1.0000e-04  eta: 7 days, 14:34:01  time: 2.8435  data_time: 2.7059  memory: 4560  loss: 0.9638  decode.loss_dice: 0.3799  decode.loss_iou: 0.5839  decode.acc_seg: 100.0000
2024/02/25 10:29:37 - mmengine - INFO - Iter(train) [   650/220000]  lr: 1.0000e-04  eta: 7 days, 14:52:56  time: 2.6809  data_time: 2.5443  memory: 4560  loss: 0.9135  decode.loss_dice: 0.3549  decode.loss_iou: 0.5586  decode.acc_seg: 100.0000
2024/02/25 10:32:10 - mmengine - INFO - Iter(train) [   700/220000]  lr: 1.0000e-04  eta: 7 days, 15:03:12  time: 3.5024  data_time: 3.3655  memory: 4560  loss: 0.9632  decode.loss_dice: 0.3798  decode.loss_iou: 0.5834  decode.acc_seg: 100.0000
2024/02/25 10:34:41 - mmengine - INFO - Iter(train) [   750/220000]  lr: 1.0000e-04  eta: 7 days, 15:04:32  time: 2.8768  data_time: 2.7399  memory: 4560  loss: 0.9396  decode.loss_dice: 0.3682  decode.loss_iou: 0.5714  decode.acc_seg: 100.0000
2024/02/25 10:37:17 - mmengine - INFO - Iter(train) [   800/220000]  lr: 1.0000e-04  eta: 7 days, 15:29:34  time: 3.6438  data_time: 3.5071  memory: 4560  loss: 0.9500  decode.loss_dice: 0.3730  decode.loss_iou: 0.5769  decode.acc_seg: 100.0000
2024/02/25 10:39:05 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:37  time: 0.5701  data_time: 0.5424  memory: 4560  
2024/02/25 10:39:24 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:27  time: 0.4810  data_time: 0.4481  memory: 1120  
2024/02/25 10:39:45 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:51  time: 0.3295  data_time: 0.2967  memory: 935  
2024/02/25 10:40:07 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:23  time: 0.5399  data_time: 0.5073  memory: 1043  
2024/02/25 10:40:25 - mmengine - INFO - per class results:
2024/02/25 10:40:25 - mmengine - INFO - 
+-------+------+-------+--------+-----------+--------+
| Class | IoU  |  Acc  | Fscore | Precision | Recall |
+-------+------+-------+--------+-----------+--------+
|  roi  | 4.61 | 93.36 |  7.76  |    4.71   | 93.36  |
+-------+------+-------+--------+-----------+--------+
2024/02/25 10:40:25 - mmengine - INFO - Iter(val) [246/246]    aAcc: 93.3600  mIoU: 4.6100  mAcc: 93.3600  mFscore: 7.7600  mPrecision: 4.7100  mRecall: 93.3600  data_time: 0.4572  time: 0.4893
2024/02/25 10:41:24 - mmengine - INFO - Iter(train) [   850/220000]  lr: 1.0000e-04  eta: 7 days, 13:40:56  time: 3.1501  data_time: 3.0131  memory: 4560  loss: 0.9329  decode.loss_dice: 0.3645  decode.loss_iou: 0.5684  decode.acc_seg: 100.0000
2024/02/25 10:43:54 - mmengine - INFO - Iter(train) [   900/220000]  lr: 1.0000e-04  eta: 7 days, 13:44:21  time: 2.8845  data_time: 2.7476  memory: 4560  loss: 0.9561  decode.loss_dice: 0.3763  decode.loss_iou: 0.5798  decode.acc_seg: 100.0000
2024/02/25 10:46:29 - mmengine - INFO - Iter(train) [   950/220000]  lr: 1.0000e-04  eta: 7 days, 14:02:16  time: 2.6129  data_time: 2.4761  memory: 4560  loss: 0.9367  decode.loss_dice: 0.3658  decode.loss_iou: 0.5709  decode.acc_seg: 100.0000
2024/02/25 10:49:11 - mmengine - INFO - Exp name: unet-s5-d16_fcn-noaux_4xb4-220k_cbis-ddsm-mono-256x256_20240225_095239
2024/02/25 10:49:11 - mmengine - INFO - Iter(train) [  1000/220000]  lr: 1.0000e-04  eta: 7 days, 14:44:28  time: 3.4940  data_time: 3.3570  memory: 4560  loss: 0.9326  decode.loss_dice: 0.3643  decode.loss_iou: 0.5683  decode.acc_seg: 100.0000
2024/02/25 10:51:36 - mmengine - INFO - Iter(train) [  1050/220000]  lr: 1.0000e-04  eta: 7 days, 14:25:51  time: 2.8785  data_time: 2.7421  memory: 4560  loss: 0.9317  decode.loss_dice: 0.3637  decode.loss_iou: 0.5679  decode.acc_seg: 100.0000
2024/02/25 10:54:09 - mmengine - INFO - Iter(train) [  1100/220000]  lr: 1.0000e-04  eta: 7 days, 14:32:47  time: 3.1252  data_time: 2.9885  memory: 4560  loss: 0.9352  decode.loss_dice: 0.3659  decode.loss_iou: 0.5693  decode.acc_seg: 100.0000
2024/02/25 10:54:43 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:12  time: 0.4109  data_time: 0.3834  memory: 1016  
2024/02/25 10:55:01 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:15  time: 0.4963  data_time: 0.4635  memory: 1022  
2024/02/25 10:55:21 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:45  time: 0.3431  data_time: 0.3103  memory: 924  
2024/02/25 10:55:44 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:21  time: 0.5487  data_time: 0.5166  memory: 990  
2024/02/25 10:56:01 - mmengine - INFO - per class results:
2024/02/25 10:56:01 - mmengine - INFO - 
+-------+------+-------+--------+-----------+--------+
| Class | IoU  |  Acc  | Fscore | Precision | Recall |
+-------+------+-------+--------+-----------+--------+
|  roi  | 5.46 | 83.77 |  9.06  |    5.6    | 83.77  |
+-------+------+-------+--------+-----------+--------+
2024/02/25 10:56:01 - mmengine - INFO - Iter(val) [246/246]    aAcc: 83.7700  mIoU: 5.4600  mAcc: 83.7700  mFscore: 9.0600  mPrecision: 5.6000  mRecall: 83.7700  data_time: 0.4238  time: 0.4556
2024/02/25 10:58:17 - mmengine - INFO - Iter(train) [  1150/220000]  lr: 1.0000e-04  eta: 7 days, 13:45:30  time: 3.6228  data_time: 3.4861  memory: 4560  loss: 0.9267  decode.loss_dice: 0.3612  decode.loss_iou: 0.5655  decode.acc_seg: 100.0000
2024/02/25 11:00:52 - mmengine - INFO - Iter(train) [  1200/220000]  lr: 1.0000e-04  eta: 7 days, 13:59:06  time: 3.0846  data_time: 2.9477  memory: 4560  loss: 0.9245  decode.loss_dice: 0.3604  decode.loss_iou: 0.5641  decode.acc_seg: 100.0000
2024/02/25 11:03:33 - mmengine - INFO - Iter(train) [  1250/220000]  lr: 1.0000e-04  eta: 7 days, 14:28:23  time: 3.7423  data_time: 3.6062  memory: 4560  loss: 0.9302  decode.loss_dice: 0.3625  decode.loss_iou: 0.5678  decode.acc_seg: 100.0000
2024/02/25 11:05:54 - mmengine - INFO - Iter(train) [  1300/220000]  lr: 1.0000e-04  eta: 7 days, 13:59:51  time: 2.1094  data_time: 1.9730  memory: 4560  loss: 0.9182  decode.loss_dice: 0.3565  decode.loss_iou: 0.5617  decode.acc_seg: 100.0000
2024/02/25 11:08:32 - mmengine - INFO - Iter(train) [  1350/220000]  lr: 1.0000e-04  eta: 7 days, 14:21:17  time: 3.3874  data_time: 3.2511  memory: 4560  loss: 0.9132  decode.loss_dice: 0.3542  decode.loss_iou: 0.5590  decode.acc_seg: 100.0000
2024/02/25 11:10:21 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:13  time: 0.3352  data_time: 0.3083  memory: 4560  
2024/02/25 11:10:39 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:16  time: 0.5329  data_time: 0.5007  memory: 1022  
2024/02/25 11:10:59 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:46  time: 0.3326  data_time: 0.3003  memory: 917  
2024/02/25 11:11:23 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:22  time: 0.5551  data_time: 0.5232  memory: 945  
2024/02/25 11:11:40 - mmengine - INFO - per class results:
2024/02/25 11:11:40 - mmengine - INFO - 
+-------+------+-------+--------+-----------+--------+
| Class | IoU  |  Acc  | Fscore | Precision | Recall |
+-------+------+-------+--------+-----------+--------+
|  roi  | 6.62 | 66.83 | 11.19  |    7.52   | 66.83  |
+-------+------+-------+--------+-----------+--------+
2024/02/25 11:11:40 - mmengine - INFO - Iter(val) [246/246]    aAcc: 66.8300  mIoU: 6.6200  mAcc: 66.8300  mFscore: 11.1900  mPrecision: 7.5200  mRecall: 66.8300  data_time: 0.4297  time: 0.4610
2024/02/25 11:12:45 - mmengine - INFO - Iter(train) [  1400/220000]  lr: 1.0000e-04  eta: 7 days, 13:51:02  time: 4.0084  data_time: 3.8717  memory: 4560  loss: 0.9312  decode.loss_dice: 0.3625  decode.loss_iou: 0.5688  decode.acc_seg: 100.0000
2024/02/25 11:15:16 - mmengine - INFO - Iter(train) [  1450/220000]  lr: 1.0000e-04  eta: 7 days, 13:50:23  time: 3.1332  data_time: 2.9964  memory: 4560  loss: 0.9341  decode.loss_dice: 0.3646  decode.loss_iou: 0.5695  decode.acc_seg: 100.0000
2024/02/25 11:17:53 - mmengine - INFO - Iter(train) [  1500/220000]  lr: 1.0000e-04  eta: 7 days, 14:06:47  time: 3.2483  data_time: 3.1114  memory: 4560  loss: 0.9368  decode.loss_dice: 0.3658  decode.loss_iou: 0.5711  decode.acc_seg: 100.0000
2024/02/25 11:20:23 - mmengine - INFO - Iter(train) [  1550/220000]  lr: 1.0000e-04  eta: 7 days, 14:02:19  time: 3.3303  data_time: 3.1931  memory: 4560  loss: 0.9070  decode.loss_dice: 0.3512  decode.loss_iou: 0.5559  decode.acc_seg: 100.0000
2024/02/25 11:22:55 - mmengine - INFO - Iter(train) [  1600/220000]  lr: 1.0000e-04  eta: 7 days, 14:06:35  time: 3.3971  data_time: 3.2604  memory: 4560  loss: 0.9040  decode.loss_dice: 0.3498  decode.loss_iou: 0.5542  decode.acc_seg: 100.0000
2024/02/25 11:25:21 - mmengine - INFO - Iter(train) [  1650/220000]  lr: 1.0000e-04  eta: 7 days, 13:54:31  time: 2.2914  data_time: 2.1553  memory: 4560  loss: 0.8960  decode.loss_dice: 0.3449  decode.loss_iou: 0.5511  decode.acc_seg: 100.0000
2024/02/25 11:25:56 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:15  time: 0.4022  data_time: 0.3755  memory: 947  
2024/02/25 11:26:13 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:15  time: 0.4954  data_time: 0.4635  memory: 1022  
2024/02/25 11:26:34 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:46  time: 0.3278  data_time: 0.2962  memory: 897  
2024/02/25 11:26:57 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:21  time: 0.5330  data_time: 0.5014  memory: 924  
2024/02/25 11:27:14 - mmengine - INFO - per class results:
2024/02/25 11:27:14 - mmengine - INFO - 
+-------+------+-------+--------+-----------+--------+
| Class | IoU  |  Acc  | Fscore | Precision | Recall |
+-------+------+-------+--------+-----------+--------+
|  roi  | 9.98 | 43.43 |  15.7  |   14.31   | 43.43  |
+-------+------+-------+--------+-----------+--------+
2024/02/25 11:27:14 - mmengine - INFO - Iter(val) [246/246]    aAcc: 43.4300  mIoU: 9.9800  mAcc: 43.4300  mFscore: 15.7000  mPrecision: 14.3100  mRecall: 43.4300  data_time: 0.4261  time: 0.4572
2024/02/25 11:29:34 - mmengine - INFO - Iter(train) [  1700/220000]  lr: 1.0000e-04  eta: 7 days, 13:31:03  time: 3.2893  data_time: 3.1525  memory: 4560  loss: 0.9105  decode.loss_dice: 0.3524  decode.loss_iou: 0.5581  decode.acc_seg: 100.0000
2024/02/25 11:31:59 - mmengine - INFO - Iter(train) [  1750/220000]  lr: 1.0000e-04  eta: 7 days, 13:17:49  time: 2.1688  data_time: 2.0325  memory: 4560  loss: 0.9000  decode.loss_dice: 0.3476  decode.loss_iou: 0.5524  decode.acc_seg: 100.0000
2024/02/25 11:34:37 - mmengine - INFO - Iter(train) [  1800/220000]  lr: 1.0000e-04  eta: 7 days, 13:32:56  time: 3.5987  data_time: 3.4623  memory: 4560  loss: 0.9137  decode.loss_dice: 0.3543  decode.loss_iou: 0.5594  decode.acc_seg: 100.0000
2024/02/25 11:37:04 - mmengine - INFO - Iter(train) [  1850/220000]  lr: 1.0000e-04  eta: 7 days, 13:24:53  time: 2.4075  data_time: 2.2712  memory: 4560  loss: 0.9045  decode.loss_dice: 0.3489  decode.loss_iou: 0.5555  decode.acc_seg: 100.0000
2024/02/25 11:39:39 - mmengine - INFO - Iter(train) [  1900/220000]  lr: 1.0000e-04  eta: 7 days, 13:33:25  time: 3.0596  data_time: 2.9228  memory: 4560  loss: 0.8961  decode.loss_dice: 0.3449  decode.loss_iou: 0.5512  decode.acc_seg: 100.0000
2024/02/25 11:41:32 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:02:29  time: 0.4772  data_time: 0.4502  memory: 4560  
2024/02/25 11:41:51 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:22  time: 0.5078  data_time: 0.4755  memory: 1022  
2024/02/25 11:42:11 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:49  time: 0.3451  data_time: 0.3132  memory: 897  
2024/02/25 11:42:34 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:23  time: 0.5464  data_time: 0.5145  memory: 924  
2024/02/25 11:42:52 - mmengine - INFO - per class results:
2024/02/25 11:42:52 - mmengine - INFO - 
+-------+-------+-------+--------+-----------+--------+
| Class |  IoU  |  Acc  | Fscore | Precision | Recall |
+-------+-------+-------+--------+-----------+--------+
|  roi  | 10.22 | 47.01 | 16.57  |   13.41   | 47.01  |
+-------+-------+-------+--------+-----------+--------+
2024/02/25 11:42:52 - mmengine - INFO - Iter(val) [246/246]    aAcc: 47.0100  mIoU: 10.2200  mAcc: 47.0100  mFscore: 16.5700  mPrecision: 13.4100  mRecall: 47.0100  data_time: 0.4477  time: 0.4790
2024/02/25 11:43:52 - mmengine - INFO - Iter(train) [  1950/220000]  lr: 1.0000e-04  eta: 7 days, 13:03:23  time: 3.1737  data_time: 3.0365  memory: 4560  loss: 0.9096  decode.loss_dice: 0.3524  decode.loss_iou: 0.5572  decode.acc_seg: 100.0000
2024/02/25 11:46:29 - mmengine - INFO - Exp name: unet-s5-d16_fcn-noaux_4xb4-220k_cbis-ddsm-mono-256x256_20240225_095239
2024/02/25 11:46:29 - mmengine - INFO - Iter(train) [  2000/220000]  lr: 1.0000e-04  eta: 7 days, 13:14:15  time: 3.5877  data_time: 3.4514  memory: 4560  loss: 0.9090  decode.loss_dice: 0.3513  decode.loss_iou: 0.5577  decode.acc_seg: 100.0000
2024/02/25 11:48:59 - mmengine - INFO - Iter(train) [  2050/220000]  lr: 1.0000e-04  eta: 7 days, 13:13:07  time: 2.4102  data_time: 2.2738  memory: 4560  loss: 0.8893  decode.loss_dice: 0.3416  decode.loss_iou: 0.5476  decode.acc_seg: 100.0000
2024/02/25 11:51:33 - mmengine - INFO - Iter(train) [  2100/220000]  lr: 1.0000e-04  eta: 7 days, 13:17:57  time: 3.2353  data_time: 3.0990  memory: 4560  loss: 0.8847  decode.loss_dice: 0.3404  decode.loss_iou: 0.5443  decode.acc_seg: 100.0000
2024/02/25 11:53:55 - mmengine - INFO - Iter(train) [  2150/220000]  lr: 1.0000e-04  eta: 7 days, 13:01:57  time: 2.2210  data_time: 2.0846  memory: 4560  loss: 0.8719  decode.loss_dice: 0.3329  decode.loss_iou: 0.5390  decode.acc_seg: 100.0000
2024/02/25 11:56:41 - mmengine - INFO - Iter(train) [  2200/220000]  lr: 1.0000e-04  eta: 7 days, 13:26:57  time: 4.0361  data_time: 3.8991  memory: 4560  loss: 0.8609  decode.loss_dice: 0.3281  decode.loss_iou: 0.5328  decode.acc_seg: 100.0000
2024/02/25 11:57:11 - mmengine - INFO - Iter(val) [ 50/246]    eta: 0:01:56  time: 0.3848  data_time: 0.3572  memory: 834  
2024/02/25 11:57:30 - mmengine - INFO - Iter(val) [100/246]    eta: 0:01:11  time: 0.4793  data_time: 0.4474  memory: 1022  
2024/02/25 11:57:52 - mmengine - INFO - Iter(val) [150/246]    eta: 0:00:44  time: 0.4265  data_time: 0.3933  memory: 897  
2024/02/25 11:58:15 - mmengine - INFO - Iter(val) [200/246]    eta: 0:00:21  time: 0.5509  data_time: 0.5187  memory: 924  
2024/02/25 11:58:33 - mmengine - INFO - per class results:
2024/02/25 11:58:33 - mmengine - INFO - 
+-------+-------+-------+--------+-----------+--------+
| Class |  IoU  |  Acc  | Fscore | Precision | Recall |
+-------+-------+-------+--------+-----------+--------+
|  roi  | 11.13 | 16.83 | 15.79  |   24.59   | 16.83  |
+-------+-------+-------+--------+-----------+--------+
2024/02/25 11:58:33 - mmengine - INFO - Iter(val) [246/246]    aAcc: 16.8300  mIoU: 11.1300  mAcc: 16.8300  mFscore: 15.7900  mPrecision: 24.5900  mRecall: 16.8300  data_time: 0.4231  time: 0.4548
2024/02/25 12:00:50 - mmengine - INFO - Iter(train) [  2250/220000]  lr: 1.0000e-04  eta: 7 days, 13:03:44  time: 3.7462  data_time: 3.6091  memory: 4560  loss: 0.8798  decode.loss_dice: 0.3378  decode.loss_iou: 0.5420  decode.acc_seg: 100.0000
2024/02/25 12:03:16 - mmengine - INFO - Iter(train) [  2300/220000]  lr: 1.0000e-04  eta: 7 days, 12:55:02  time: 3.7227  data_time: 3.5860  memory: 4560  loss: 0.9200  decode.loss_dice: 0.3585  decode.loss_iou: 0.5615  decode.acc_seg: 100.0000
2024/02/25 12:05:48 - mmengine - INFO - Iter(train) [  2350/220000]  lr: 1.0000e-04  eta: 7 days, 12:56:47  time: 3.3388  data_time: 3.2019  memory: 4560  loss: 0.8916  decode.loss_dice: 0.3438  decode.loss_iou: 0.5478  decode.acc_seg: 100.0000
