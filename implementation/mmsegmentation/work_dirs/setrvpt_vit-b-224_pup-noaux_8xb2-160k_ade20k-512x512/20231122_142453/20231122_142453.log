2023/11/22 14:24:54 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1179351503
    GPU 0: NVIDIA GeForce RTX 4050 Laptop GPU
    CUDA_HOME: /opt/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.140
    GCC: gcc (GCC) 13.2.1 20230801
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.8.1
    MMEngine: 0.9.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1179351503
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/11/22 14:24:54 - mmengine - INFO - Config:
backbone_norm_cfg = dict(eps=1e-06, requires_grad=True, type='LN')
crop_size = (
    200,
    200,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        200,
        200,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=[],
    backbone=dict(
        drop_rate=0.0,
        embed_dims=1024,
        img_size=(
            200,
            200,
        ),
        in_channels=3,
        init_cfg=dict(
            checkpoint='pretrain/vit_base_p16_384.pth', type='Pretrained'),
        interpolate_mode='bilinear',
        norm_cfg=dict(eps=1e-06, requires_grad=True, type='LN'),
        num_heads=16,
        num_layers=1,
        out_indices=0,
        patch_size=16,
        prompt_cfg=dict(
            depth=1,
            dropout=0.1,
            init='random',
            length=50,
            location='prepend',
            shared=False),
        type='PromptedVisionTransformer',
        with_cls_token=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            200,
            200,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=256,
        dropout_ratio=0,
        in_channels=1024,
        in_index=0,
        kernel_size=3,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=4,
        type='SETRUPHead',
        up_scale=2),
    pretrained=None,
    test_cfg=dict(crop_size=(
        200,
        200,
    ), mode='slide', stride=(
        341,
        341,
    )),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
num_layers = 1
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.0005, momentum=0.9, type='SGD', weight_decay=0.0),
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=1.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.0005, momentum=0.9, type='SGD', weight_decay=0.0)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
record_gpu_snapshot = True
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=1000, type='IterBasedTrainLoop', val_interval=1000)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/setrvpt_vit-b-224_pup-noaux_8xb2-160k_ade20k-512x512'

2023/11/22 14:24:55 - mmengine - INFO - Total parameters: 17754774
2023/11/22 14:24:55 - mmengine - INFO - Trainable parameters: 4222614
2023/11/22 14:24:55 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/11/22 14:24:55 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.norm.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr=0.0005
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:weight_decay=0.0
2023/11/22 14:24:56 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr_mult=1.0
2023/11/22 14:24:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.pos_embed - torch.Size([1, 145, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.prompt_embeddings - torch.Size([1, 50, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.patch_embed.projection.weight - torch.Size([1024, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([150]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/11/22 14:24:56 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/11/22 14:24:56 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/11/22 14:24:56 - mmengine - INFO - Checkpoints will be saved to /home/drumsnchocolate/Documents/Studie/Master/2022-2023/Thesis/Final Project/implementation/mmsegmentation/work_dirs/setrvpt_vit-b-224_pup-noaux_8xb2-160k_ade20k-512x512.
2023/11/22 14:25:14 - mmengine - INFO - Iter(train) [  50/1000]  base_lr: 4.9989e-04 lr: 4.9989e-04  eta: 0:05:32  time: 0.2733  data_time: 0.0022  memory: 4546  loss: 4.1914  decode.loss_ce: 4.1914  decode.acc_seg: 12.0771
2023/11/22 14:25:26 - mmengine - INFO - Iter(train) [ 100/1000]  base_lr: 4.9978e-04 lr: 4.9978e-04  eta: 0:04:28  time: 0.1773  data_time: 0.0012  memory: 4863  loss: 4.0779  decode.loss_ce: 4.0779  decode.acc_seg: 0.0344
2023/11/22 14:25:37 - mmengine - INFO - Iter(train) [ 150/1000]  base_lr: 4.9966e-04 lr: 4.9966e-04  eta: 0:03:51  time: 0.1389  data_time: 0.0021  memory: 4704  loss: 4.0584  decode.loss_ce: 4.0584  decode.acc_seg: 21.8048
2023/11/22 14:25:49 - mmengine - INFO - Iter(train) [ 200/1000]  base_lr: 4.9955e-04 lr: 4.9955e-04  eta: 0:03:32  time: 0.0970  data_time: 0.0012  memory: 4274  loss: 3.4668  decode.loss_ce: 3.4668  decode.acc_seg: 44.9241
2023/11/22 14:25:58 - mmengine - INFO - Iter(train) [ 250/1000]  base_lr: 4.9944e-04 lr: 4.9944e-04  eta: 0:03:05  time: 0.1858  data_time: 0.0012  memory: 4230  loss: 3.5927  decode.loss_ce: 3.5927  decode.acc_seg: 12.9504
2023/11/22 14:26:05 - mmengine - INFO - Iter(train) [ 300/1000]  base_lr: 4.9933e-04 lr: 4.9933e-04  eta: 0:02:39  time: 0.2018  data_time: 0.0013  memory: 4701  loss: 3.2072  decode.loss_ce: 3.2072  decode.acc_seg: 39.8859
2023/11/22 14:26:10 - mmengine - INFO - Iter(train) [ 350/1000]  base_lr: 4.9921e-04 lr: 4.9921e-04  eta: 0:02:16  time: 0.0936  data_time: 0.0013  memory: 3598  loss: 3.6881  decode.loss_ce: 3.6881  decode.acc_seg: 6.8209
2023/11/22 14:26:17 - mmengine - INFO - Iter(train) [ 400/1000]  base_lr: 4.9910e-04 lr: 4.9910e-04  eta: 0:02:01  time: 0.0889  data_time: 0.0012  memory: 4863  loss: 3.3161  decode.loss_ce: 3.3161  decode.acc_seg: 14.4520
2023/11/22 14:26:22 - mmengine - INFO - Iter(train) [ 450/1000]  base_lr: 4.9899e-04 lr: 4.9899e-04  eta: 0:01:45  time: 0.0875  data_time: 0.0012  memory: 2661  loss: 3.3926  decode.loss_ce: 3.3926  decode.acc_seg: 43.9853
2023/11/22 14:26:28 - mmengine - INFO - Iter(train) [ 500/1000]  base_lr: 4.9888e-04 lr: 4.9888e-04  eta: 0:01:32  time: 0.1473  data_time: 0.0013  memory: 3796  loss: 3.3512  decode.loss_ce: 3.3512  decode.acc_seg: 29.0047
2023/11/22 14:26:34 - mmengine - INFO - Iter(train) [ 550/1000]  base_lr: 4.9876e-04 lr: 4.9876e-04  eta: 0:01:20  time: 0.1391  data_time: 0.0012  memory: 2475  loss: 3.0113  decode.loss_ce: 3.0113  decode.acc_seg: 24.4842
2023/11/22 14:26:43 - mmengine - INFO - Iter(train) [ 600/1000]  base_lr: 4.9865e-04 lr: 4.9865e-04  eta: 0:01:11  time: 0.0958  data_time: 0.0022  memory: 4566  loss: 2.7302  decode.loss_ce: 2.7302  decode.acc_seg: 46.9520
2023/11/22 14:26:49 - mmengine - INFO - Iter(train) [ 650/1000]  base_lr: 4.9854e-04 lr: 4.9854e-04  eta: 0:01:00  time: 0.0928  data_time: 0.0017  memory: 2755  loss: 3.3935  decode.loss_ce: 3.3935  decode.acc_seg: 19.5264
2023/11/22 14:26:55 - mmengine - INFO - Iter(train) [ 700/1000]  base_lr: 4.9843e-04 lr: 4.9843e-04  eta: 0:00:50  time: 0.0943  data_time: 0.0012  memory: 2990  loss: 3.6881  decode.loss_ce: 3.6881  decode.acc_seg: 0.0000
2023/11/22 14:27:01 - mmengine - INFO - Iter(train) [ 750/1000]  base_lr: 4.9831e-04 lr: 4.9831e-04  eta: 0:00:41  time: 0.0969  data_time: 0.0012  memory: 3442  loss: 3.2760  decode.loss_ce: 3.2760  decode.acc_seg: 14.4625
2023/11/22 14:27:07 - mmengine - INFO - Iter(train) [ 800/1000]  base_lr: 4.9820e-04 lr: 4.9820e-04  eta: 0:00:32  time: 0.1679  data_time: 0.0013  memory: 3089  loss: 3.2781  decode.loss_ce: 3.2781  decode.acc_seg: 21.6549
2023/11/22 14:27:14 - mmengine - INFO - Iter(train) [ 850/1000]  base_lr: 4.9809e-04 lr: 4.9809e-04  eta: 0:00:24  time: 0.1687  data_time: 0.0013  memory: 3721  loss: 3.2830  decode.loss_ce: 3.2830  decode.acc_seg: 17.4324
2023/11/22 14:27:19 - mmengine - INFO - Iter(train) [ 900/1000]  base_lr: 4.9798e-04 lr: 4.9798e-04  eta: 0:00:15  time: 0.1007  data_time: 0.0012  memory: 2403  loss: 2.8185  decode.loss_ce: 2.8185  decode.acc_seg: 0.0000
2023/11/22 14:27:24 - mmengine - INFO - Iter(train) [ 950/1000]  base_lr: 4.9786e-04 lr: 4.9786e-04  eta: 0:00:07  time: 0.0943  data_time: 0.0012  memory: 2399  loss: 3.2394  decode.loss_ce: 3.2394  decode.acc_seg: 2.5095
2023/11/22 14:27:30 - mmengine - INFO - Exp name: setrvpt_vit-b-224_pup-noaux_8xb2-160k_ade20k-512x512_20231122_142453
2023/11/22 14:27:30 - mmengine - INFO - Iter(train) [1000/1000]  base_lr: 4.9775e-04 lr: 4.9775e-04  eta: 0:00:00  time: 0.1601  data_time: 0.0012  memory: 2847  loss: 2.9011  decode.loss_ce: 2.9011  decode.acc_seg: 4.0464
2023/11/22 14:27:30 - mmengine - INFO - Saving checkpoint at 1000 iterations
