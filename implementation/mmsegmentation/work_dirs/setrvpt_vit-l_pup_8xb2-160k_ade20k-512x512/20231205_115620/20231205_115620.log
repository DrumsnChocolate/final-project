2023/12/05 11:56:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1351839239
    GPU 0: NVIDIA GeForce RTX 4050 Laptop GPU
    CUDA_HOME: /opt/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.140
    GCC: gcc (GCC) 13.2.1 20230801
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.8.1
    MMEngine: 0.9.1

Runtime environment:
    cudnn_benchmark: True
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1351839239
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/12/05 11:56:20 - mmengine - INFO - Config:
backbone_norm_cfg = dict(eps=1e-06, requires_grad=True, type='LN')
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = 'work_dirs/setrvpt_vit-l_pup_8xb2-160k_ade20k-512x512/iter_160000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=[
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=0,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=1,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=2,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
    ],
    backbone=dict(
        drop_rate=0.0,
        embed_dims=1024,
        img_size=(
            512,
            512,
        ),
        in_channels=3,
        init_cfg=dict(
            checkpoint='pretrain/vit_large_p16.pth', type='Pretrained'),
        interpolate_mode='bilinear',
        norm_cfg=dict(eps=1e-06, requires_grad=True, type='LN'),
        num_heads=16,
        num_layers=24,
        out_indices=(
            9,
            14,
            19,
            23,
        ),
        patch_size=16,
        prompt_cfg=dict(
            depth=24,
            dropout=0.1,
            init='random',
            length=50,
            location='prepend',
            shared=False),
        type='PromptedVisionTransformer',
        with_cls_token=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=256,
        dropout_ratio=0,
        in_channels=1024,
        in_index=3,
        kernel_size=3,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=4,
        type='SETRUPHead',
        up_scale=2),
    pretrained=None,
    test_cfg=dict(crop_size=(
        512,
        512,
    ), mode='slide', stride=(
        341,
        341,
    )),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.0005, momentum=0.9, type='SGD', weight_decay=0.0),
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=1.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.0005, momentum=0.9, type='SGD', weight_decay=0.0)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/setrvpt_vit-l_pup_8xb2-160k_ade20k-512x512'

2023/12/05 11:56:22 - mmengine - INFO - Total parameters: 318518872
2023/12/05 11:56:22 - mmengine - INFO - Trainable parameters: 14372440
2023/12/05 11:56:22 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/12/05 11:56:22 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/12/05 11:56:23 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/12/05 11:56:29 - mmengine - INFO - Load checkpoint from work_dirs/setrvpt_vit-l_pup_8xb2-160k_ade20k-512x512/iter_160000.pth
2023/12/05 11:56:49 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:12:42  time: 0.3984  data_time: 0.0016  memory: 2263  
2023/12/05 11:57:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:12:05  time: 0.3825  data_time: 0.0017  memory: 2082  
2023/12/05 11:57:25 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:11:25  time: 0.3629  data_time: 0.0017  memory: 2040  
2023/12/05 11:57:44 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:10  time: 0.3823  data_time: 0.0017  memory: 2143  
2023/12/05 11:58:01 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:10:41  time: 0.3634  data_time: 0.0016  memory: 2178  
2023/12/05 11:58:19 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:21  time: 0.3831  data_time: 0.0018  memory: 2077  
2023/12/05 11:58:37 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:03  time: 0.3444  data_time: 0.0016  memory: 2076  
2023/12/05 11:58:55 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:44  time: 0.3819  data_time: 0.0015  memory: 2079  
2023/12/05 11:59:11 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:09:16  time: 0.3427  data_time: 0.0016  memory: 2037  
2023/12/05 11:59:29 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:58  time: 0.3442  data_time: 0.0016  memory: 2040  
2023/12/05 11:59:48 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:08:43  time: 0.4020  data_time: 0.0017  memory: 2074  
2023/12/05 12:00:06 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:25  time: 0.3833  data_time: 0.0017  memory: 2079  
2023/12/05 12:00:23 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:06  time: 0.3635  data_time: 0.0015  memory: 2092  
2023/12/05 12:00:43 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:51  time: 0.3829  data_time: 0.0017  memory: 2089  
2023/12/05 12:01:02 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:33  time: 0.3823  data_time: 0.0015  memory: 2099  
2023/12/05 12:01:18 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:12  time: 0.3839  data_time: 0.0016  memory: 2041  
2023/12/05 12:01:37 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:56  time: 0.3847  data_time: 0.0017  memory: 2035  
2023/12/05 12:01:53 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:35  time: 0.3057  data_time: 0.0015  memory: 2055  
2023/12/05 12:02:11 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:17  time: 0.3446  data_time: 0.0012  memory: 2070  
2023/12/05 12:02:28 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:58  time: 0.3445  data_time: 0.0011  memory: 2072  
2023/12/05 12:02:47 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:42  time: 0.4018  data_time: 0.0010  memory: 2101  
2023/12/05 12:03:06 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:05:24  time: 0.3459  data_time: 0.0011  memory: 2064  
2023/12/05 12:03:24 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:06  time: 0.3643  data_time: 0.0011  memory: 2059  
2023/12/05 12:03:42 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:48  time: 0.3449  data_time: 0.0012  memory: 2881  
2023/12/05 12:03:58 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:29  time: 0.3450  data_time: 0.0012  memory: 2051  
2023/12/05 12:04:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:10  time: 0.3651  data_time: 0.0011  memory: 2035  
2023/12/05 12:04:32 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:52  time: 0.3264  data_time: 0.0012  memory: 2036  
2023/12/05 12:04:50 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:34  time: 0.3845  data_time: 0.0012  memory: 2071  
2023/12/05 12:05:06 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:15  time: 0.3842  data_time: 0.0011  memory: 2071  
2023/12/05 12:05:23 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:58  time: 0.3262  data_time: 0.0012  memory: 2035  
2023/12/05 12:05:42 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:40  time: 0.3658  data_time: 0.0013  memory: 2064  
2023/12/05 12:05:59 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:22  time: 0.3656  data_time: 0.0012  memory: 2033  
2023/12/05 12:06:16 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:04  time: 0.3071  data_time: 0.0012  memory: 2149  
2023/12/05 12:06:35 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:46  time: 0.3653  data_time: 0.0011  memory: 2069  
2023/12/05 12:06:53 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:29  time: 0.3463  data_time: 0.0011  memory: 2074  
2023/12/05 12:07:10 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:11  time: 0.3856  data_time: 0.0012  memory: 2043  
2023/12/05 12:07:29 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:53  time: 0.3850  data_time: 0.0011  memory: 2009  
2023/12/05 12:07:45 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:35  time: 0.3270  data_time: 0.0010  memory: 2089  
2023/12/05 12:08:04 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:17  time: 0.3463  data_time: 0.0011  memory: 2172  
2023/12/05 12:08:20 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.3263  data_time: 0.0010  memory: 2095  
2023/12/05 12:08:20 - mmengine - INFO - per class results:
2023/12/05 12:08:20 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.67 | 86.31 |
|       building      | 82.29 | 93.38 |
|         sky         | 93.44 | 96.73 |
|        floor        | 79.99 | 87.85 |
|         tree        | 74.33 | 86.23 |
|       ceiling       | 82.15 | 91.19 |
|         road        | 81.52 | 88.14 |
|         bed         | 85.33 |  94.4 |
|      windowpane     | 59.08 |  77.4 |
|        grass        | 66.74 | 81.82 |
|       cabinet       | 56.85 | 70.19 |
|       sidewalk      |  60.3 | 78.38 |
|        person       | 76.43 | 88.84 |
|        earth        | 33.19 | 45.61 |
|         door        | 43.96 | 60.25 |
|        table        | 53.74 | 68.79 |
|       mountain      | 53.85 | 67.07 |
|        plant        | 52.17 | 63.74 |
|       curtain       | 70.36 | 86.85 |
|        chair        | 48.78 | 64.75 |
|         car         | 80.89 | 91.07 |
|        water        | 50.93 | 61.72 |
|       painting      | 66.26 | 81.26 |
|         sofa        | 60.66 |  81.4 |
|        shelf        | 44.63 | 66.65 |
|        house        | 51.89 |  65.3 |
|         sea         | 58.86 | 82.88 |
|        mirror       | 63.31 | 71.38 |
|         rug         | 65.72 | 73.19 |
|        field        | 22.58 |  47.8 |
|       armchair      | 30.43 | 47.18 |
|         seat        | 64.17 | 83.36 |
|        fence        | 43.73 | 61.02 |
|         desk        | 42.04 | 66.04 |
|         rock        | 43.34 |  66.7 |
|       wardrobe      | 45.24 | 60.08 |
|         lamp        | 46.58 | 62.63 |
|       bathtub       | 79.01 | 88.35 |
|       railing       | 30.86 | 43.51 |
|       cushion       | 50.14 | 65.17 |
|         base        | 32.21 | 52.15 |
|         box         | 20.59 | 28.06 |
|        column       |  40.8 | 54.43 |
|      signboard      | 28.93 | 39.52 |
|   chest of drawers  | 37.38 | 57.91 |
|       counter       | 30.86 | 37.94 |
|         sand        | 33.83 | 52.36 |
|         sink        | 62.04 | 70.59 |
|      skyscraper     | 63.68 | 82.72 |
|      fireplace      | 61.99 | 89.27 |
|     refrigerator    | 60.56 | 77.26 |
|      grandstand     | 49.07 | 75.97 |
|         path        | 23.94 | 34.48 |
|        stairs       | 24.73 | 35.69 |
|        runway       | 65.26 | 88.92 |
|         case        | 57.54 |  77.4 |
|      pool table     | 87.07 | 97.02 |
|        pillow       |  49.4 | 59.42 |
|     screen door     | 65.96 | 75.31 |
|       stairway      | 28.73 | 45.03 |
|        river        | 13.78 | 32.27 |
|        bridge       | 56.99 | 76.33 |
|       bookcase      | 36.39 | 59.49 |
|        blind        | 29.61 | 32.08 |
|     coffee table    | 52.01 | 79.11 |
|        toilet       | 69.64 | 90.12 |
|        flower       | 29.81 | 47.13 |
|         book        | 44.23 |  61.6 |
|         hill        |  6.55 | 17.68 |
|        bench        | 38.22 | 48.82 |
|      countertop     | 48.36 | 65.49 |
|        stove        | 59.26 | 75.59 |
|         palm        | 49.64 | 69.34 |
|    kitchen island   | 39.35 | 72.47 |
|       computer      | 57.56 | 73.68 |
|     swivel chair    | 37.64 | 53.17 |
|         boat        | 59.73 | 70.48 |
|         bar         | 49.67 | 68.28 |
|    arcade machine   | 67.54 | 89.51 |
|        hovel        | 54.08 |  79.0 |
|         bus         | 77.44 | 87.62 |
|        towel        | 55.36 | 74.31 |
|        light        | 20.36 | 21.57 |
|        truck        | 22.18 | 34.37 |
|        tower        | 25.06 | 36.07 |
|      chandelier     | 58.15 | 76.04 |
|        awning       | 19.19 | 22.35 |
|     streetlight     |  5.23 |  7.04 |
|        booth        | 38.57 | 43.16 |
| television receiver | 62.81 | 73.99 |
|       airplane      | 50.39 | 61.14 |
|      dirt track     |  13.1 | 17.09 |
|       apparel       | 22.43 | 34.42 |
|         pole        | 14.18 | 17.16 |
|         land        |  0.03 |  0.03 |
|      bannister      |  1.96 |  2.56 |
|      escalator      | 58.04 | 71.14 |
|       ottoman       | 35.45 | 48.05 |
|        bottle       | 14.87 |  17.1 |
|        buffet       |  36.0 | 41.95 |
|        poster       |  7.01 |  9.15 |
|        stage        |  9.72 | 22.53 |
|         van         | 30.18 | 36.72 |
|         ship        |  5.87 |  7.88 |
|       fountain      | 24.13 |  30.0 |
|    conveyer belt    | 55.29 |  84.3 |
|        canopy       | 29.99 | 41.34 |
|        washer       | 60.82 | 74.22 |
|      plaything      |  9.83 |  16.3 |
|    swimming pool    | 44.96 | 68.43 |
|        stool        | 14.36 | 20.66 |
|        barrel       | 30.61 | 60.26 |
|        basket       |  13.8 | 15.82 |
|      waterfall      | 56.51 | 85.16 |
|         tent        | 84.95 | 99.24 |
|         bag         |  0.54 |  0.55 |
|       minibike      | 53.67 | 63.19 |
|        cradle       | 63.77 | 85.62 |
|         oven        | 20.22 | 25.14 |
|         ball        | 46.82 | 59.42 |
|         food        | 43.08 | 50.16 |
|         step        |  4.71 |  5.13 |
|         tank        | 56.01 | 59.11 |
|      trade name     | 16.59 | 18.36 |
|      microwave      |  55.8 | 64.06 |
|         pot         | 36.04 | 42.48 |
|        animal       | 61.14 |  63.1 |
|       bicycle       |  41.0 |  61.7 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 29.35 | 39.82 |
|        screen       | 44.46 | 87.01 |
|       blanket       |  3.18 |  3.31 |
|      sculpture      | 35.53 | 43.44 |
|         hood        | 45.78 | 52.09 |
|        sconce       |  0.43 |  0.44 |
|         vase        | 18.39 | 28.55 |
|    traffic light    |  0.0  |  0.0  |
|         tray        |  0.56 |  0.6  |
|        ashcan       |  9.36 |  9.74 |
|         fan         | 17.41 |  18.8 |
|         pier        |  10.3 | 41.77 |
|      crt screen     |  0.08 |  0.13 |
|        plate        |  41.0 | 50.53 |
|       monitor       |  1.17 |  1.73 |
|    bulletin board   |  6.24 |  7.06 |
|        shower       |  0.0  |  0.0  |
|       radiator      |  9.98 |  9.98 |
|        glass        |  0.0  |  0.0  |
|        clock        |  0.0  |  0.0  |
|         flag        | 12.97 | 13.06 |
+---------------------+-------+-------+
2023/12/05 12:08:20 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9600  mIoU: 40.6000  mAcc: 52.6900  data_time: 0.0015  time: 0.3555
