2024/03/09 12:23:06 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 2061132290
    GPU 0: NVIDIA A40
    CUDA_HOME: None
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.8.1
    MMEngine: 0.9.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2061132290
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/03/09 12:23:07 - mmengine - INFO - Config:
backbone_norm_cfg = dict(eps=1e-06, requires_grad=True, type='LN')
crop_size = (
    512,
    512,
)
custom_hooks = [
    dict(
        min_delta=0,
        monitor='train_loss',
        patience=40,
        rule='less',
        type='EarlyStoppingHook'),
]
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0.0,
        0.0,
        0.0,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        255,
        255,
        255,
    ],
    test_cfg=dict(size=(
        512,
        512,
    )),
    type='SegDataPreProcessor')
data_root = 'data/cbis/cbis-linked'
dataset_type = 'CBISMonoDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=22000,
        max_keep_ckpts=2,
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=[],
    backbone=dict(
        drop_rate=0.0,
        embed_dims=1024,
        final_norm=True,
        img_size=(
            512,
            512,
        ),
        in_channels=3,
        init_cfg=None,
        interpolate_mode='bilinear',
        norm_cfg=dict(eps=1e-06, requires_grad=True, type='LN'),
        num_heads=16,
        num_layers=24,
        out_indices=23,
        patch_bias=True,
        patch_size=16,
        type='VisionTransformer',
        with_cls_token=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0.0,
            0.0,
            0.0,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            255,
            255,
            255,
        ],
        test_cfg=dict(size=(
            512,
            512,
        )),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=256,
        dropout_ratio=0,
        in_channels=1024,
        in_index=0,
        kernel_size=3,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=1,
        num_convs=4,
        type='SETRUPHead',
        up_scale=2),
    pretrained=None,
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
num_layers = 24
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.0001, type='Adam'),
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=10.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.0001, type='Adam')
param_scheduler = [
    dict(
        cooldown=0,
        factor=0.1,
        min_value=0,
        monitor='mCE',
        patience=25,
        rule='less',
        threshold=0.0001,
        type='ReduceOnPlateauLR'),
]
record_gpu_snapshot = False
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/test', seg_map_path='annotations_binary/test'),
        data_root='data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='CLAHE'),
            dict(scale=(
                512,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = [
    dict(iou_metrics=[
        'mIoU',
        'mAcc',
        'mFscore',
    ], type='IoUMetric'),
    dict(type='CrossEntropyMetric'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='CLAHE'),
    dict(scale=(
        512,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=220000, type='IterBasedTrainLoop', val_interval=276)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        data_prefix=dict(
            img_path='images/train', seg_map_path='annotations_binary/train'),
        data_root='data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='CLAHE'),
            dict(scale=(
                512,
                512,
            ), type='Resize'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='CLAHE'),
    dict(scale=(
        512,
        512,
    ), type='Resize'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = None
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/val', seg_map_path='annotations_binary/val'),
        data_root='data/cbis/cbis-linked',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='CLAHE'),
            dict(scale=(
                512,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='CBISMonoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(iou_metrics=[
        'mIoU',
        'mAcc',
        'mFscore',
    ], type='IoUMetric'),
    dict(type='CrossEntropyMetric'),
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='CLAHE'),
    dict(scale=(
        512,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/setr_vit-l_pup-noaux_8xb2-220k_cbis-ddsm-mono-256x256'

2024/03/09 12:23:11 - mmengine - INFO - Total parameters: 308282625
2024/03/09 12:23:11 - mmengine - INFO - Trainable parameters: 308282625
2024/03/09 12:23:12 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/03/09 12:23:12 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.norm.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.norm.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.norm.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.norm.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr=0.001
2024/03/09 12:23:13 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr_mult=10.0
2024/03/09 12:23:13 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2024/03/09 12:23:13 - mmengine - WARNING - The prefix is not set in metric class CrossEntropyMetric.
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.pos_embed - torch.Size([1, 1025, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.patch_embed.projection.weight - torch.Size([1024, 3, 16, 16]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.patch_embed.projection.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.0.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.0.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.0.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.0.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.1.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.1.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.1.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.1.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.1.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.2.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.2.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.2.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.2.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.2.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.3.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.3.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.3.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.3.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.3.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.4.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.4.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.4.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.4.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.4.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.5.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.5.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.5.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.5.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.5.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.6.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.6.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.6.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.6.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.6.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.7.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.7.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.7.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.7.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.7.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.8.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.8.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.8.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.8.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.8.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.9.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.9.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.9.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.9.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.9.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.10.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.10.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.10.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.10.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.10.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.11.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.11.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.11.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.11.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.11.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.12.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.12.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.12.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.12.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.12.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.13.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.13.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.13.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.13.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.13.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.14.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.14.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.14.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.14.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.14.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.15.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.15.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.15.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.15.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.15.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.16.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.16.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.16.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.16.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.16.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.17.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.17.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.17.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.17.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.17.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.18.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.18.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.18.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.18.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.18.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.19.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.19.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.19.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.19.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.19.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.20.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.20.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.20.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.20.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.20.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.21.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.21.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.21.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.21.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.21.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.22.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.22.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.22.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.22.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.22.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.23.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.23.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.23.ffn.layers.0.0.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.23.ffn.layers.1.weight - torch.Size([1024, 4096]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.layers.23.ffn.layers.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([1, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/03/09 12:23:14 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/03/09 12:23:14 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/03/09 12:23:14 - mmengine - INFO - Checkpoints will be saved to /home/s1952889/final-project/implementation/mmsegmentation/work_dirs/setr_vit-l_pup-noaux_8xb2-220k_cbis-ddsm-mono-256x256/20240309_122306.
2024/03/09 12:26:13 - mmengine - INFO - Iter(train) [    50/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 9 days, 2:50:37  time: 2.8700  data_time: 1.3429  memory: 36001  loss: 0.0829  decode.loss_ce: 0.0829  decode.acc_seg: 99.0153
2024/03/09 12:28:59 - mmengine - INFO - Iter(train) [   100/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 18:49:13  time: 3.6742  data_time: 2.1459  memory: 36001  loss: 0.0804  decode.loss_ce: 0.0804  decode.acc_seg: 96.2473
2024/03/09 12:31:33 - mmengine - INFO - Iter(train) [   150/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 11:08:45  time: 2.8172  data_time: 1.2869  memory: 36001  loss: 0.1057  decode.loss_ce: 0.1057  decode.acc_seg: 98.2265
2024/03/09 12:34:32 - mmengine - INFO - Iter(train) [   200/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 15:01:28  time: 3.4950  data_time: 1.9650  memory: 36001  loss: 0.0657  decode.loss_ce: 0.0657  decode.acc_seg: 98.7352
2024/03/09 12:37:16 - mmengine - INFO - Iter(train) [   250/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 13:35:50  time: 3.5744  data_time: 2.0447  memory: 36001  loss: 0.0806  decode.loss_ce: 0.0806  decode.acc_seg: 99.3310
2024/03/09 12:38:51 - mmengine - WARNING - Image shapes are different in the batch.
2024/03/09 12:40:22 - mmengine - INFO - Iter(val) [50/62]    eta: 0:00:25  time: 1.9982  data_time: 1.6229  memory: 36001  
2024/03/09 12:40:37 - mmengine - INFO - per class results:
2024/03/09 12:40:37 - mmengine - INFO - 
+-------+-----+-----+--------+-----------+--------+
| Class | IoU | Acc | Fscore | Precision | Recall |
+-------+-----+-----+--------+-----------+--------+
|  roi  | 0.0 | 0.0 |  0.0   |    0.0    |  0.0   |
+-------+-----+-----+--------+-----------+--------+
2024/03/09 12:40:38 - mmengine - INFO - Iter(val) [62/62]    aAcc: 0.0000  mIoU: 0.0000  mAcc: 0.0000  mFscore: 0.0000  mPrecision: 0.0000  mRecall: 0.0000  mCE: 0.0690  data_time: 1.5754  time: 1.9700
2024/03/09 12:40:39 - mmengine - INFO - Exp name: setr_vit-l_pup-noaux_8xb2-220k_cbis-ddsm-mono-256x256_20240309_122306
2024/03/09 12:41:38 - mmengine - INFO - Iter(train) [   300/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 7:42:40  time: 3.0618  data_time: 1.5336  memory: 36001  loss: 0.0891  decode.loss_ce: 0.0891  decode.acc_seg: 99.0064
2024/03/09 12:44:22 - mmengine - INFO - Iter(train) [   350/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 7:52:36  time: 3.3467  data_time: 1.8202  memory: 36001  loss: 0.0897  decode.loss_ce: 0.0897  decode.acc_seg: 99.0450
2024/03/09 12:47:11 - mmengine - INFO - Iter(train) [   400/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 8:28:59  time: 3.7662  data_time: 2.2387  memory: 36001  loss: 0.0765  decode.loss_ce: 0.0765  decode.acc_seg: 99.4629
2024/03/09 12:49:52 - mmengine - INFO - Iter(train) [   450/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 8:06:14  time: 2.7580  data_time: 1.2294  memory: 36001  loss: 0.0591  decode.loss_ce: 0.0591  decode.acc_seg: 98.6466
2024/03/09 12:52:38 - mmengine - INFO - Iter(train) [   500/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 8:18:10  time: 3.7906  data_time: 2.2608  memory: 36001  loss: 0.1026  decode.loss_ce: 0.1026  decode.acc_seg: 89.8710
2024/03/09 12:55:25 - mmengine - INFO - Iter(train) [   550/220000]  base_lr: 1.0000e-04 lr: 1.0000e-04  eta: 8 days, 8:29:58  time: 3.0851  data_time: 1.5569  memory: 36001  loss: 0.0992  decode.loss_ce: 0.0992  decode.acc_seg: 98.4612
2024/03/09 12:57:15 - mmengine - INFO - Iter(val) [50/62]    eta: 0:00:24  time: 2.1339  data_time: 1.7576  memory: 36001  
2024/03/09 12:57:30 - mmengine - INFO - per class results:
2024/03/09 12:57:30 - mmengine - INFO - 
+-------+-----+-----+--------+-----------+--------+
| Class | IoU | Acc | Fscore | Precision | Recall |
+-------+-----+-----+--------+-----------+--------+
|  roi  | 0.0 | 0.0 |  0.0   |    0.0    |  0.0   |
+-------+-----+-----+--------+-----------+--------+
2024/03/09 12:57:30 - mmengine - INFO - Iter(val) [62/62]    aAcc: 0.0000  mIoU: 0.0000  mAcc: 0.0000  mFscore: 0.0000  mPrecision: 0.0000  mRecall: 0.0000  mCE: 0.0714  data_time: 1.4959  time: 1.8653
