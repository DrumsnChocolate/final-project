2023/10/17 22:40:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1873714451
    GPU 0: NVIDIA GeForce RTX 4050 Laptop GPU
    CUDA_HOME: /opt/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.91
    GCC: gcc (GCC) 13.2.1 20230801
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.8.1
    MMEngine: 0.9.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1873714451
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/10/17 22:40:31 - mmengine - INFO - Config:
backbone_norm_cfg = dict(eps=1e-06, requires_grad=True, type='LN')
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = 'checkpoints/setr_pup_512x512_160k_b16_ade20k_20210619_191343-7e0ce826.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=[
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=0,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=1,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
        dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=256,
            dropout_ratio=0,
            in_channels=1024,
            in_index=2,
            kernel_size=3,
            loss_decode=dict(
                loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=150,
            num_convs=2,
            type='SETRUPHead'),
    ],
    backbone=dict(
        drop_rate=0.0,
        embed_dims=1024,
        img_size=(
            512,
            512,
        ),
        in_channels=3,
        init_cfg=dict(
            checkpoint='pretrain/vit_large_p16.pth', type='Pretrained'),
        interpolate_mode='bilinear',
        norm_cfg=dict(eps=1e-06, requires_grad=True, type='LN'),
        num_heads=16,
        num_layers=24,
        out_indices=(
            9,
            14,
            19,
            23,
        ),
        patch_size=16,
        type='VisionTransformer',
        with_cls_token=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=256,
        dropout_ratio=0,
        in_channels=1024,
        in_index=3,
        kernel_size=3,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=4,
        type='SETRUPHead',
        up_scale=2),
    pretrained=None,
    test_cfg=dict(crop_size=(
        512,
        512,
    ), mode='slide', stride=(
        341,
        341,
    )),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0),
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=10.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/setr_vit-l_pup_8xb2-160k_ade20k-512x512'

2023/10/17 22:40:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/10/17 22:40:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/10/17 22:40:35 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/10/17 22:40:35 - mmengine - INFO - Load checkpoint from checkpoints/setr_pup_512x512_160k_b16_ade20k_20210619_191343-7e0ce826.pth
2023/10/17 22:40:55 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:12:36  time: 0.3899  data_time: 0.0015  memory: 2258  
2023/10/17 22:41:13 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:11:54  time: 0.3731  data_time: 0.0016  memory: 2201  
2023/10/17 22:41:30 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:11:14  time: 0.3586  data_time: 0.0016  memory: 2160  
2023/10/17 22:41:49 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:10:58  time: 0.3740  data_time: 0.0018  memory: 2263  
2023/10/17 22:42:06 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:10:30  time: 0.3563  data_time: 0.0021  memory: 2298  
2023/10/17 22:42:23 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:10  time: 0.3752  data_time: 0.0019  memory: 2196  
2023/10/17 22:42:41 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:52  time: 0.3366  data_time: 0.0016  memory: 2195  
2023/10/17 22:42:59 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:33  time: 0.3746  data_time: 0.0017  memory: 2198  
2023/10/17 22:43:14 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:09:06  time: 0.3488  data_time: 0.0017  memory: 2156  
2023/10/17 22:43:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:49  time: 0.3378  data_time: 0.0018  memory: 2159  
2023/10/17 22:43:51 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:08:34  time: 0.3941  data_time: 0.0020  memory: 2193  
2023/10/17 22:44:08 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:16  time: 0.3763  data_time: 0.0021  memory: 2198  
2023/10/17 22:44:25 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:07:57  time: 0.3564  data_time: 0.0017  memory: 2212  
2023/10/17 22:44:45 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:42  time: 0.3770  data_time: 0.0022  memory: 2209  
2023/10/17 22:45:03 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:25  time: 0.3747  data_time: 0.0018  memory: 2219  
2023/10/17 22:45:19 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:04  time: 0.3753  data_time: 0.0018  memory: 2161  
2023/10/17 22:45:38 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:48  time: 0.3744  data_time: 0.0014  memory: 2154  
2023/10/17 22:45:53 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:28  time: 0.2989  data_time: 0.0013  memory: 2174  
2023/10/17 22:46:11 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:10  time: 0.3364  data_time: 0.0012  memory: 2190  
2023/10/17 22:46:27 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:51  time: 0.3359  data_time: 0.0015  memory: 2191  
2023/10/17 22:46:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:35  time: 0.3912  data_time: 0.0013  memory: 2221  
2023/10/17 22:47:04 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:05:18  time: 0.3384  data_time: 0.0016  memory: 2183  
2023/10/17 22:47:22 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:00  time: 0.3626  data_time: 0.0013  memory: 2178  
2023/10/17 22:47:40 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:42  time: 0.3357  data_time: 0.0014  memory: 2877  
2023/10/17 22:47:56 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:24  time: 0.3359  data_time: 0.0016  memory: 2170  
2023/10/17 22:48:11 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:05  time: 0.3542  data_time: 0.0012  memory: 2155  
2023/10/17 22:48:28 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:47  time: 0.3167  data_time: 0.0014  memory: 2155  
2023/10/17 22:48:45 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:29  time: 0.3745  data_time: 0.0014  memory: 2190  
2023/10/17 22:49:01 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:11  time: 0.3721  data_time: 0.0014  memory: 2190  
2023/10/17 22:49:18 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:54  time: 0.3167  data_time: 0.0012  memory: 2154  
2023/10/17 22:49:36 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:36  time: 0.3555  data_time: 0.0014  memory: 2184  
2023/10/17 22:49:53 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:19  time: 0.3547  data_time: 0.0014  memory: 2152  
2023/10/17 22:50:09 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:01  time: 0.2989  data_time: 0.0017  memory: 2268  
2023/10/17 22:50:27 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:44  time: 0.3555  data_time: 0.0014  memory: 2188  
2023/10/17 22:50:45 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:27  time: 0.3360  data_time: 0.0012  memory: 2193  
2023/10/17 22:51:02 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:09  time: 0.3743  data_time: 0.0015  memory: 2162  
2023/10/17 22:51:20 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:52  time: 0.3739  data_time: 0.0012  memory: 2127  
2023/10/17 22:51:36 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:34  time: 0.3166  data_time: 0.0012  memory: 2209  
2023/10/17 22:51:54 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:17  time: 0.3361  data_time: 0.0013  memory: 2290  
2023/10/17 22:52:10 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.3166  data_time: 0.0013  memory: 2214  
2023/10/17 22:52:10 - mmengine - INFO - per class results:
2023/10/17 22:52:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 72.69 | 87.03 |
|       building      | 81.18 |  93.4 |
|         sky         | 93.02 | 96.44 |
|        floor        | 75.49 | 87.42 |
|         tree        | 72.92 | 86.31 |
|       ceiling       | 78.47 | 88.51 |
|         road        | 77.68 | 85.39 |
|         bed         | 83.69 | 93.31 |
|      windowpane     | 58.51 | 74.22 |
|        grass        | 66.88 | 79.01 |
|       cabinet       | 56.64 | 69.46 |
|       sidewalk      | 59.93 | 76.26 |
|        person       | 77.48 |  89.8 |
|        earth        | 38.18 | 55.54 |
|         door        | 39.73 | 51.02 |
|        table        | 55.91 | 73.43 |
|       mountain      | 56.31 | 71.89 |
|        plant        | 49.37 | 60.39 |
|       curtain       | 69.28 | 84.34 |
|        chair        | 52.15 | 68.23 |
|         car         | 80.87 | 90.37 |
|        water        | 51.46 | 66.45 |
|       painting      |  66.7 | 78.82 |
|         sofa        | 60.74 | 74.45 |
|        shelf        |  39.6 | 57.38 |
|        house        | 39.82 |  46.6 |
|         sea         | 59.28 | 80.68 |
|        mirror       | 58.84 | 67.31 |
|         rug         | 57.43 | 62.18 |
|        field        | 31.38 | 43.44 |
|       armchair      | 38.69 | 63.23 |
|         seat        | 60.81 | 82.09 |
|        fence        | 46.28 | 59.65 |
|         desk        | 46.88 | 65.65 |
|         rock        | 39.19 | 56.72 |
|       wardrobe      | 41.21 |  52.9 |
|         lamp        | 51.51 | 63.89 |
|       bathtub       | 69.23 | 77.85 |
|       railing       | 33.73 |  46.8 |
|       cushion       |  53.1 | 66.59 |
|         base        | 26.19 | 41.27 |
|         box         | 26.69 | 38.67 |
|        column       | 41.22 | 53.03 |
|      signboard      | 29.09 |  37.5 |
|   chest of drawers  | 35.22 | 53.13 |
|       counter       | 26.84 | 33.54 |
|         sand        | 36.75 | 59.84 |
|         sink        | 65.12 | 74.08 |
|      skyscraper     | 65.85 | 81.18 |
|      fireplace      | 69.78 | 84.57 |
|     refrigerator    | 58.67 | 67.51 |
|      grandstand     | 45.99 | 78.13 |
|         path        | 22.51 | 33.02 |
|        stairs       | 28.55 | 36.37 |
|        runway       | 65.24 | 85.43 |
|         case        | 52.78 | 68.69 |
|      pool table     | 87.68 | 94.36 |
|        pillow       | 54.08 |  63.1 |
|     screen door     | 53.61 | 68.29 |
|       stairway      | 26.13 | 34.32 |
|        river        | 14.74 | 34.62 |
|        bridge       | 34.49 | 48.13 |
|       bookcase      | 34.41 | 52.54 |
|        blind        | 38.38 | 42.77 |
|     coffee table    |  54.5 |  71.9 |
|        toilet       | 76.58 | 84.34 |
|        flower       | 33.67 | 48.94 |
|         book        |  46.2 | 64.76 |
|         hill        |  6.41 |  9.07 |
|        bench        | 40.59 | 48.04 |
|      countertop     | 52.58 | 70.44 |
|        stove        | 59.78 | 68.09 |
|         palm        | 50.32 |  69.2 |
|    kitchen island   | 38.04 |  73.7 |
|       computer      | 67.75 | 83.36 |
|     swivel chair    | 40.52 | 56.57 |
|         boat        | 40.79 | 57.28 |
|         bar         | 44.84 | 62.58 |
|    arcade machine   |  63.2 | 65.92 |
|        hovel        | 53.16 | 68.85 |
|         bus         | 76.73 | 90.54 |
|        towel        | 58.45 | 75.58 |
|        light        | 33.61 | 36.56 |
|        truck        | 33.41 |  39.9 |
|        tower        | 11.98 | 17.54 |
|      chandelier     | 59.36 | 75.61 |
|        awning       | 25.27 | 29.25 |
|     streetlight     | 15.33 | 18.95 |
|        booth        | 40.06 | 43.52 |
| television receiver | 58.59 | 69.43 |
|       airplane      | 48.39 | 63.48 |
|      dirt track     |  0.41 |  0.67 |
|       apparel       | 25.62 | 34.82 |
|         pole        | 13.59 | 17.77 |
|         land        |  3.61 |  5.59 |
|      bannister      | 10.31 | 15.15 |
|      escalator      | 55.61 | 78.35 |
|       ottoman       | 35.26 | 47.29 |
|        bottle       |  34.4 | 58.23 |
|        buffet       | 46.19 | 55.16 |
|        poster       | 16.78 | 22.43 |
|        stage        |  21.2 | 32.81 |
|         van         | 36.86 | 46.95 |
|         ship        | 51.38 | 79.49 |
|       fountain      | 30.71 | 31.64 |
|    conveyer belt    | 83.44 | 92.13 |
|        canopy       | 36.29 | 44.57 |
|        washer       | 64.18 | 70.36 |
|      plaything      | 21.07 | 31.71 |
|    swimming pool    | 61.94 | 82.84 |
|        stool        | 26.73 | 34.79 |
|        barrel       | 19.41 | 35.23 |
|        basket       | 24.81 | 29.87 |
|      waterfall      | 49.55 | 56.88 |
|         tent        | 84.74 | 99.18 |
|         bag         |  8.23 |  8.86 |
|       minibike      |  65.3 | 76.79 |
|        cradle       | 63.94 | 80.47 |
|         oven        | 31.14 | 45.06 |
|         ball        | 46.61 | 56.99 |
|         food        | 24.36 | 28.39 |
|         step        |  7.96 |  10.8 |
|         tank        | 47.53 | 50.25 |
|      trade name     | 18.68 | 21.07 |
|      microwave      | 58.54 | 63.78 |
|         pot         | 40.32 | 46.81 |
|        animal       | 57.11 | 59.21 |
|       bicycle       | 50.21 | 64.03 |
|         lake        | 53.36 | 63.35 |
|      dishwasher     | 43.94 | 56.74 |
|        screen       | 56.57 | 71.45 |
|       blanket       | 11.83 | 14.53 |
|      sculpture      | 51.34 | 65.97 |
|         hood        | 46.87 | 55.17 |
|        sconce       | 35.67 | 42.44 |
|         vase        | 24.57 | 37.32 |
|    traffic light    | 20.46 | 35.68 |
|         tray        |  2.06 |  4.9  |
|        ashcan       | 24.73 | 30.66 |
|         fan         |  45.1 | 52.83 |
|         pier        | 26.05 | 45.78 |
|      crt screen     |  0.36 |  0.73 |
|        plate        | 44.37 | 53.65 |
|       monitor       | 16.39 | 20.15 |
|    bulletin board   | 32.73 | 41.25 |
|        shower       |  3.3  |  5.92 |
|       radiator      | 55.89 | 64.57 |
|        glass        |  9.47 | 10.08 |
|        clock        | 25.55 | 27.75 |
|         flag        | 25.49 | 29.11 |
+---------------------+-------+-------+
2023/10/17 22:52:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.5700  mIoU: 44.2800  mAcc: 55.6600  data_time: 0.0018  time: 0.3472
